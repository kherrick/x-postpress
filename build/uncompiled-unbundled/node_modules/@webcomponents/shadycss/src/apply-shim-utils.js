"use strict";import templateMap from"./template-map.js";import{StyleNode}from"./css-parse.js";const CURRENT_VERSION="_applyShimCurrentVersion",NEXT_VERSION="_applyShimNextVersion",VALIDATING_VERSION="_applyShimValidatingVersion",promise=Promise.resolve();export function invalidate(elementName){let template=templateMap[elementName];if(template){invalidateTemplate(template)}}export function invalidateTemplate(template){template[CURRENT_VERSION]=template[CURRENT_VERSION]||0;template[VALIDATING_VERSION]=template[VALIDATING_VERSION]||0;template[NEXT_VERSION]=(template[NEXT_VERSION]||0)+1}export function isValid(elementName){let template=templateMap[elementName];if(template){return templateIsValid(template)}return!0}export function templateIsValid(template){return template[CURRENT_VERSION]===template[NEXT_VERSION]}export function isValidating(elementName){let template=templateMap[elementName];if(template){return templateIsValidating(template)}return!1}export function templateIsValidating(template){return!templateIsValid(template)&&template[VALIDATING_VERSION]===template[NEXT_VERSION]}export function startValidating(elementName){let template=templateMap[elementName];startValidatingTemplate(template)}export function startValidatingTemplate(template){template[VALIDATING_VERSION]=template[NEXT_VERSION];if(!template._validating){template._validating=!0;promise.then(function(){template[CURRENT_VERSION]=template[NEXT_VERSION];template._validating=!1})}}export function elementsAreInvalid(){for(let elementName in templateMap){let template=templateMap[elementName];if(!templateIsValid(template)){return!0}}return!1}