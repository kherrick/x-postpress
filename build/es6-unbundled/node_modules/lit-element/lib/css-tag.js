define(["exports"],function(_exports){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.css=_exports.unsafeCss=_exports.CSSResult=_exports.supportsAdoptingStyleSheets=void 0;const supportsAdoptingStyleSheets="adoptedStyleSheets"in Document.prototype;_exports.supportsAdoptingStyleSheets=supportsAdoptingStyleSheets;const constructionToken=Symbol();class CSSResult{constructor(cssText,safeToken){if(safeToken!==constructionToken){throw new Error("CSSResult is not constructable. Use `unsafeCss` or `css` instead.")}this.cssText=cssText}get styleSheet(){if(this._styleSheet===void 0){if(supportsAdoptingStyleSheets){this._styleSheet=new CSSStyleSheet;this._styleSheet.replaceSync(this.cssText)}else{this._styleSheet=null}}return this._styleSheet}}_exports.CSSResult=CSSResult;const unsafeCss=value=>{return new CSSResult(value+"",constructionToken)};_exports.unsafeCss=unsafeCss;const textFromCSSResult=value=>{if(value instanceof CSSResult){return value.cssText}else{throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCss' to pass non-literal values, but
            take care to ensure page security.`)}},css=(strings,...values)=>{const cssText=values.reduce((acc,v,idx)=>acc+textFromCSSResult(v)+strings[idx+1],strings[0]);return new CSSResult(cssText,constructionToken)};_exports.css=css});